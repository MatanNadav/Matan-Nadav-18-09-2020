{"version":3,"sources":["assets/day.svg","assets/cloudy.svg","assets/rainy-5.svg","assets/weather.svg","services/WeatherService.js","store/actions/WeatherActions.js","components/ForecastPreview/ForecastPreview.js","components/WeatherFilter/WeatherFilter.js","pages/HomePage/HomePage.js","components/AppHeader/AppHeader.js","components/FavoritePreview/FavoritePreview.js","pages/FavoritesPage/FavoritesPage.js","App.js","serviceWorker.js","store/reducers/WeatherReducer.js","store/reducers/index.js","index.js"],"names":["module","exports","axios","Axios","create","withCredentials","getWeather","updateWeatherPreferences","data","loadFromStorage","weather","isFavorite","saveToStorage","storageFavorites","getAutocomplete","filter","currWeatherName","a","name","toLowerCase","storageWeather","q","key","get","res","defaultWeather","favorites","findIndex","city","val","suggestions","map","Key","LocalizedName","length","slice","action","localStorage","getItem","JSON","parse","setItem","stringify","setWeatherAction","cityName","WeatherService","dispatch","type","toggleFavorite","favorite","setFilterAction","value","setPrevPathAction","path","ForecastPreview","props","maxTemp","minTemp","unit","useSelector","state","weatherReducer","date","Date","toUTCString","substring","Temperature","Maximum","Value","Minimum","className","WeatherText","Math","floor","WeatherFilter","timeout","useDispatch","locationSuggestions","datalist","document","getElementById","useEffect","innerHTML","forEach","el","createElement","appendChild","id","placeholder","onChange","ev","term","target","setTimeout","payload","list","onClick","input","param","find","errorText","trim","Swal","fire","icon","title","text","clearTimeout","HomePage","prevPath","desc","Metric","Imperial","EpochTime","toDateString","src","includes","require","alt","forecast","day","i","AppHeader","to","FavoritePreview","removeFavorite","FavoritePage","App","theme","bg","classList","add","remove","exact","component","FavoritesPage","Boolean","window","location","hostname","match","defaultState","updateWeatherFavorite","idx","unshift","splice","findFavorite","stateData","combineReducer","combineReducers","newFavorites","newStateData","newUnit","newTheme","favoritesFromStorage","middleware","thunk","store","createStore","reducer","applyMiddleware","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ac3c353.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/day.7f93fbdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.ad789581.svg\";","module.exports = __webpack_public_path__ + \"static/media/rainy-5.2bd23641.svg\";","module.exports = __webpack_public_path__ + \"static/media/weather.56c46d80.svg\";","import Axios from 'axios'\r\nconst BASE_URL = process.env.NODE_ENV === \"production\" ? \"/api/\" : \"//localhost:8080/api/\"\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport default {\r\n    getWeather,\r\n    updateWeatherPreferences,\r\n    storageFavorites,\r\n    loadFromStorage,\r\n    getAutocomplete\r\n}\r\n\r\nasync function getWeather(filter, currWeatherName) {\r\n    if (filter?.name && currWeatherName && filter.name.toLowerCase() === currWeatherName.toLowerCase()) {\r\n        let storageWeather = loadFromStorage('weather')\r\n        if (storageWeather) return storageWeather\r\n    }\r\n    else {\r\n        try {\r\n            let q = (!filter?.key) ? '?q=215854&name=Tel Aviv' :  `?q=${filter.key}&name=${filter.name}`\r\n            const res = await axios.get(`${BASE_URL}weather` + q)\r\n            if (!res.data.weather) {\r\n                let defaultWeather = loadFromStorage('weather')\r\n                return defaultWeather\r\n            }\r\n\r\n            let favorites = storageFavorites(null, \"load\")\r\n            if (favorites[0]) {\r\n                let idx = favorites.findIndex( city => {\r\n                    return city.key === res.data.weather.key // checking if the weather that came from API is already in favorites\r\n                })\r\n\r\n            if (idx >= 0 ) res.data.weather.isFavorite = true\r\n            }\r\n            saveToStorage('weather', res.data)\r\n            saveToStorage('impor', res.data)\r\n            return res.data\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nasync function getAutocomplete(val) {\r\n    let q = `?q=${val}`\r\n    try {\r\n        const res = await axios.get(`${BASE_URL}weather/suggest` + q)\r\n        if (!res.data[0]) return null\r\n        let suggestions = res.data.map(city => {\r\n            return {\r\n                key: city.Key,\r\n                name: city.LocalizedName\r\n            }\r\n        })\r\n        if (suggestions.length > 5) suggestions = suggestions.slice(0,5)\r\n        return suggestions\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nfunction updateWeatherPreferences() {\r\n    const data = loadFromStorage('weather')\r\n    data.weather.isFavorite = !data.weather.isFavorite\r\n    saveToStorage('weather', data)\r\n    return data.weather\r\n}\r\n\r\nfunction storageFavorites(favorites = [], action = \"load\") {\r\n    if (action === \"save\") {\r\n        saveToStorage('favorites', favorites)\r\n    }\r\n    else {\r\n        let res = loadFromStorage('favorites')\r\n        if (res) return res\r\n        else return []\r\n    }\r\n}\r\n\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val)? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val));\r\n}\r\n","import WeatherService from '../../services/WeatherService';\r\n\r\n\r\n// action functions:\r\n\r\nexport function setWeatherAction(filter, cityName) {\r\n    if (!cityName) {\r\n        let res = WeatherService.loadFromStorage('weather')\r\n        cityName =  (res) ? res.weather.cityName : '' // passing to service to check against storage before calling api\r\n    }\r\n    return async (dispatch) => {\r\n        try {\r\n            let data = await WeatherService.getWeather(filter, cityName)\r\n            dispatch({\r\n                type: \"SET_WEATHER\",\r\n                data: data\r\n            })\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function toggleFavorite(favorite) {\r\n    if (favorite) { // if action disptached from Favorite page = removing from favorites page\r\n        favorite.isFavorite = !favorite.isFavorite\r\n        return (dispatch) => {\r\n            dispatch({\r\n                type: \"REMOVE_FROM_FAVORITES\",\r\n                data: favorite\r\n            })\r\n        }\r\n    }\r\n    return (dispatch) => { // if action disptached from Home page = removing/favoriting current weather\r\n        let weather = WeatherService.updateWeatherPreferences()\r\n        dispatch({\r\n            type: \"UPDATE_WEATHER_FAVORITE\",\r\n            data: weather\r\n        })\r\n    }\r\n}\r\n\r\nexport function setLocationSuggestions(value) {\r\n    return async (dispatch) => {\r\n        try {\r\n           let suggestions = await WeatherService.getAutocomplete(value)\r\n           dispatch({ type: 'SET_LOCATION_SUGGESTIONS', payload: suggestions })\r\n        }catch(err) {\r\n          throw err\r\n        }\r\n     }\r\n}\r\n\r\nexport function setFilterAction(value) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type:\"SET_FILTER\",\r\n            data: value\r\n        })\r\n    }\r\n}\r\n\r\nexport function setUnitAction() {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: 'SET_UNIT', \r\n            data:null\r\n        })\r\n    }\r\n}\r\n\r\nexport function setThemeAction() {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: 'SET_THEME', \r\n            data:null\r\n        })\r\n    }\r\n}\r\n\r\nexport function setFavoritesAction() {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: 'SET_FAVORITES',\r\n            data: null\r\n        })\r\n    }\r\n}\r\n\r\nexport function setPrevPathAction(path) {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: 'SET_PREV_PATH',\r\n            data: path\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport \"./ForecastPreview.css\"\r\n\r\nconst ForecastPreview = (props) => {\r\n    const unit = useSelector(state => state.weatherReducer.unit)\r\n    let maxTemp, minTemp\r\n\r\n    if (!props.weather && unit) return null\r\n    let date = new Date(props.weather.Date).toUTCString().substring(0 , props.weather.Date.length - 13)\r\n    maxTemp = (unit === \"C\") ? props.weather.Temperature.Maximum.Value : (props.weather.Temperature.Maximum.Value * (9/5) + 32)\r\n    minTemp= (unit === \"C\") ? props.weather.Temperature.Maximum.Value : (props.weather.Temperature.Minimum.Value * (9/5) + 32)\r\n    \r\n \r\n    return (\r\n        <div className=\"forecast-preview-container\">\r\n                       <div className=\"forecast flex column\">\r\n                           <h4>{date}</h4>\r\n                           <div className=\"forecast-details flex column space-between\">\r\n                               <p>\r\n                                   {props.weather.WeatherText}\r\n                               </p>\r\n                               <p>\r\n                                   Max: {Math.floor(maxTemp)} {unit}\r\n                               </p>\r\n                               <p>\r\n                                   Min: {Math.floor(minTemp)} {unit}\r\n                               </p>\r\n\r\n                           </div>\r\n                         \r\n                       </div>\r\n             \r\n                   </div>\r\n       );\r\n}\r\n\r\nexport default ForecastPreview","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setFilterAction, setPrevPathAction, setLocationSuggestions } from '../../store/actions/WeatherActions'\r\nimport Swal from 'sweetalert2'\r\nimport './WeatherFilter.css'\r\n\r\n\r\n\r\nconst WeatherFilter = () => {\r\n    const dispatch =  useDispatch()\r\n    const suggestions = useSelector(state => state.weatherReducer.locationSuggestions)\r\n    let datalist = document.getElementById('search-options')\r\n    let timeout\r\n\r\n    const onSearch = () => {\r\n        let input = document.getElementById(\"filter-input\")\r\n        let param = (suggestions) ? suggestions.find(city => {return city.name.toLowerCase() === input.value.toLowerCase()}) : null\r\n        let errorText = (param) ? \"Not a valid search\" : \"Api is not available\"\r\n\r\n        if (input.value.trim() === '' || input.value.length < 3 || !param) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Uh-oh',\r\n                text: errorText\r\n            })\r\n            return\r\n        }\r\n        \r\n        dispatch(setPrevPathAction('/'))\r\n        dispatch(setFilterAction(param))\r\n        input.value = ''\r\n        clearTimeout(timeout)\r\n    }\r\n\r\n    const onInputChange= (ev) => {\r\n        let term = ev.target.value\r\n        timeout = setTimeout(() => { // timeout is because of API limit\r\n            dispatch(setLocationSuggestions(term))\r\n        }, 1000)\r\n    }\r\n    useEffect(()=> {\r\n        if (!datalist || !suggestions) return\r\n        datalist.innerHTML = ''\r\n        suggestions.forEach(value => {\r\n            let el = document.createElement('option')\r\n            el.value = value.name\r\n            datalist.appendChild(el)\r\n        })\r\n        \r\n    }, [suggestions, datalist])\r\n    return (\r\n        <div className=\"filter-container flex row align-center\">\r\n                <input id=\"filter-input\" name=\"filter-input\" className=\"input-filter\" placeholder=\"Search for weather\" onChange={onInputChange} list=\"search-options\"/>\r\n                <datalist id=\"search-options\">\r\n\r\n                </datalist>\r\n            <button className=\"btn btn-filter\" onClick={onSearch} >Search</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherFilter\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setWeatherAction, toggleFavorite, setPrevPathAction } from '../../store/actions/WeatherActions'\r\nimport ForecastPreview from \"../../components/ForecastPreview/ForecastPreview\"\r\nimport WeatherFilter from \"../../components/WeatherFilter/WeatherFilter\"\r\nimport './HomePage.css'\r\n\r\n\r\nconst HomePage = () => {\r\n    const dispatch =  useDispatch()\r\n    const data = useSelector(state => state.weatherReducer.data)\r\n    const prevPath = useSelector(state => state.weatherReducer.prevPath)\r\n    const filter = useSelector(state => state.weatherReducer.filter)\r\n    const unit = useSelector(state => state.weatherReducer.unit)\r\n    \r\n    \r\n    useEffect(() => {\r\n        if (prevPath === '/favorites' ) {\r\n            return\r\n        }\r\n        dispatch(setWeatherAction(filter))\r\n        dispatch(setPrevPathAction('/'))\r\n\r\n    }, [prevPath, dispatch, filter])\r\n\r\n    const handleFavorite = () => {\r\n        dispatch(toggleFavorite(null))\r\n        dispatch(setWeatherAction(filter, data.weather.cityName))\r\n    }\r\n\r\n    const requireSVG = (desc) => {\r\n        if (desc.includes(\"sunny\") || desc.includes(\"clear\")) return require(\"../../assets/day.svg\")\r\n        else if (desc.includes(\"cloud\")) return require(\"../../assets/cloudy.svg\")\r\n        else if (desc.includes(\"rain\") || desc.includes(\"showers\")) return require(\"../../assets/rainy-5.svg\")\r\n        else return require(\"../../assets/weather.svg\")\r\n    }\r\n    if(!data.weather) return null\r\n    return (\r\n            <section className=\"home-container\">\r\n                <WeatherFilter></WeatherFilter>\r\n                <div className = \"card\">\r\n                    <div className=\"card-header\">{data.weather.cityName} - {data.weather.WeatherText} - {unit === \"C\" ? data.weather.Temperature.Metric.Value : data.weather.Temperature.Imperial.Value} {unit}</div>\r\n                    <div className=\"card-main\">\r\n                        <div className=\"main-description\">\r\n                            <h3> Date: {new Date(data.weather.EpochTime * 1000).toDateString()}</h3>\r\n                            <img src={requireSVG(data.weather.WeatherText.toLowerCase())} alt=\"symbol\" className=\"weather-card-symbol\"/>\r\n                            <button className=\"btn\" onClick={handleFavorite}>{(data.weather.isFavorite) ? \"Remove Favorite\" : \"Make Favorite\" }</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"forecast-container flex space-between\">\r\n                    {\r\n                        data.forecast.map( (day,i) => <ForecastPreview key={i} weather={day}></ForecastPreview>)\r\n                    }\r\n                </div>\r\n            </section>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default HomePage","import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setUnitAction, setThemeAction } from '../../store/actions/WeatherActions'\r\n\r\nimport './AppHeader.css'\r\n\r\n\r\nconst AppHeader = () => {\r\n    const dispatch =  useDispatch()\r\n    const handleUnits = () => {\r\n      dispatch(setUnitAction())\r\n    }\r\n    const handleTheme = () => {\r\n      dispatch(setThemeAction())\r\n    }\r\n    return (\r\n      <div className=\"app-header\">\r\n\r\n        <nav className=\"nav-container flex space-around align-center\">\r\n            <li className=\"nav-item flex align-center\"><NavLink className=\"header-link\" to=\"/\"><button className=\"btn header-btn\">Weather</button></NavLink></li>\r\n            <li className=\"nav-item flex align-center\"><button className=\"btn header-btn\" onClick={handleUnits}>C / F</button></li>\r\n            <li className=\"nav-item flex align-center\"> <button className=\"btn header-btn\" onClick={handleTheme}>Dark / Light</button></li>\r\n            <li className=\"nav-item flex align-center\"><NavLink className=\"header-link\" to=\"/favorites\"><button className=\"btn header-btn\">Favorites</button></NavLink></li>\r\n        </nav>\r\n          \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default AppHeader;\r\n  ","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setWeatherAction, setFilterAction, setPrevPathAction } from '../../store/actions/WeatherActions'\r\nimport { NavLink } from 'react-router-dom'\r\nimport \"./FavoritePreview.css\"\r\n\r\n\r\n\r\nconst FavoritePreview = (props) => {\r\n    const city = props.city\r\n    const unit = useSelector(state => state.weatherReducer.unit)\r\n    let filter = {key: city.key, name:city.cityName}\r\n    const dispatch = useDispatch()\r\n\r\n    const weatherRoute = () => {\r\n        dispatch(setPrevPathAction('/favorites'))\r\n        dispatch(setFilterAction(filter))\r\n        dispatch(setWeatherAction(filter))\r\n    }\r\n    return (\r\n        city && <div className=\"favorite-preview-container\">\r\n                      <div className = \"card fav-card\">\r\n                          <div className=\"card-header\">{city.cityName} - {city.WeatherText} - {unit === \"C\" ? city.Temperature.Metric.Value : city.Temperature.Imperial.Value} {unit}</div>\r\n                          <div className=\"card-main\">\r\n                              <div className=\"main-description\">\r\n                                  <h3> Date: {new Date(city.EpochTime * 1000).toDateString()}</h3>\r\n                                  <button className=\"btn fav-btn\" onClick={ () => props.removeFavorite(city)}>Remove</button>\r\n                                  <button className=\"btn fav-btn\" onClick={weatherRoute}><NavLink className=\"favorite-link\" to='/'>Weather</NavLink></button>\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n            \r\n                </div>\r\n      );\r\n}\r\n\r\nexport default FavoritePreview","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setFavoritesAction, toggleFavorite, setFilterAction } from '../../store/actions/WeatherActions'\r\nimport FavoritePreview from \"../../components/FavoritePreview/FavoritePreview\"\r\nimport './FavoritesPage.css'\r\n\r\n\r\nconst FavoritePage = () => {\r\n    const favorites = useSelector(state => state.weatherReducer.favorites)\r\n    const dispatch = useDispatch()\r\n    const filter = useSelector(state => state.weatherReducer.filter)\r\n    \r\n    useEffect(() => {\r\n        dispatch(setFavoritesAction())\r\n        dispatch(setFilterAction(filter))\r\n    }, [dispatch, filter])\r\n\r\n    const removeFavorite = (favorite) => {\r\n        dispatch(toggleFavorite(favorite))\r\n        dispatch(setFavoritesAction())\r\n    }\r\n\r\n    return (\r\n        <section className=\"favorites-container flex column\">\r\n            {\r\n                (favorites[0]) ? favorites.map(city => <FavoritePreview key={city.cityName} city={city} removeFavorite={removeFavorite}></FavoritePreview>) : <h3 className=\"default-header\">No Favorites</h3>\r\n            }\r\n        </section>\r\n    )\r\n}\r\nexport default FavoritePage\r\n","import React, { useEffect }from 'react';\nimport './App.css';\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport HomePage from \"./pages/HomePage/HomePage\"\nimport AppHeader from \"./components/AppHeader/AppHeader\"\nimport FavoritesPage from \"./pages/FavoritesPage/FavoritesPage\"\nimport { useSelector } from 'react-redux';\n\n\n\nfunction App() {\n  const theme = useSelector(state => state.weatherReducer.theme)\n  \n  useEffect(() => {\n    let bg = document.getElementById('app-bg')\n    if (theme === \"Dark\") bg.classList.add('dark')\n    else bg.classList.remove('dark') // not using toggle so useEffect wont change background on load\n  }, [theme])\n\n  return (\n    <div className=\"App\">\n      <div id=\"app-bg\" className=\"bg\"></div>\n      <HashRouter>\n          <AppHeader></AppHeader>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage}></Route>\n          <Route exact path=\"/favorites\" component={FavoritesPage}></Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import WeatherService from \"../../services/WeatherService\"\r\n\r\nconst defaultState = {\r\n    data: {},\r\n    favorites: [],\r\n    locationSuggestions: [],\r\n    filter: {\r\n        key: 215854,\r\n        name:'Tel Aviv'\r\n    },\r\n    prevPath: '/',\r\n    unit: \"C\",\r\n    theme: \"Light\"\r\n}\r\n\r\nexport default function weatherReducer(state = defaultState, action) {\r\n    let idx\r\n    let newFavorites = state.favorites\r\n    let newStateData = state.data\r\n    let newUnit = state.unit\r\n    let newTheme = state.theme\r\n    switch(action.type) {\r\n        case 'SET_WEATHER':\r\n            return {...state, data:action.data}\r\n        \r\n        case 'SET_FILTER':\r\n            return {...state, filter: action.data}\r\n\r\n        case 'UPDATE_WEATHER_FAVORITE':\r\n            idx = findFavorite(newFavorites, action.data)\r\n            let {favorites} = updateWeatherFavorite(idx, newFavorites, action.data)\r\n            return {...state, data:action.data, favorites: favorites}\r\n\r\n        case 'SET_FAVORITES':\r\n            let favoritesFromStorage = WeatherService.storageFavorites()\r\n            return {...state, favorites: favoritesFromStorage}\r\n\r\n        case 'REMOVE_FROM_FAVORITES':\r\n            idx = findFavorite(newFavorites, action.data)\r\n            if (idx >= 0) {\r\n                let {stateData, favorites}= removeFavorite(idx, newStateData, newFavorites, action.data)\r\n                return {...state, data: stateData,favorites:favorites}\r\n            }\r\n            else {\r\n                return {...state, favorites:action.data}\r\n            }\r\n        case 'SET_LOCATION_SUGGESTIONS':\r\n            return { ...state, locationSuggestions: action.payload }\r\n        case 'SET_PREV_PATH':\r\n            state.prevPath = action.data\r\n            return {...state, prevPath: action.data}\r\n\r\n        case 'SET_UNIT':\r\n            newUnit = (newUnit === \"C\") ? \"F\" : \"C\"\r\n            return {...state, unit:newUnit}\r\n        case 'SET_THEME':\r\n            newTheme = (newTheme === \"Light\") ? \"Dark\" : \"Light\"\r\n            return {...state, theme:newTheme}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nfunction updateWeatherFavorite(idx, favorites, payload) {\r\n    if (idx < 0) favorites.unshift(payload)\r\n    else favorites.splice(idx, 1)\r\n    WeatherService.storageFavorites(favorites, \"save\")\r\n    return {favorites}\r\n}\r\n\r\nfunction findFavorite(favorites, data) {\r\n    let idx\r\n    if (!favorites[0]) return idx = -1\r\n    else {\r\n        idx =  favorites.findIndex( city => {\r\n            return city.key === data.key // not using id because its random\r\n        })\r\n    }\r\n    return idx\r\n}\r\n\r\nfunction removeFavorite(idx, stateData, favorites) {\r\n    if (idx >= 0) {\r\n        if (stateData.weather.id === favorites[idx].id) { // checking if favorite removed = current weather\r\n            let weather = WeatherService.updateWeatherPreferences() // updating weather in \"database\"(local storage)\r\n            stateData.weather = weather\r\n        }\r\n        favorites.splice(idx, 1)\r\n        WeatherService.storageFavorites(favorites, \"save\")\r\n    }\r\n    return {stateData, favorites}\r\n}","import { combineReducers } from 'redux';\r\nimport weatherReducer from './WeatherReducer'\r\n\r\nconst combineReducer = combineReducers({  // not really needed for one reducer\r\n    weatherReducer // ES6 syntax\r\n})\r\n\r\nexport default combineReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware} from 'redux';\nimport { Provider } from 'react-redux'\nimport reducer from './store/reducers' \nimport thunk from 'redux-thunk';\n\nconst middleware = [ thunk ]\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware) // for async purposes\n)\n\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}